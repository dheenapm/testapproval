name: Release Process

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version'
        required: true
        default: '1.0.0'
      application_name:
        description: 'Application name'
        required: true
        default: 'my-app'
      qa_approver:
        description: 'QA approver username'
        required: true

permissions:
  issues: write  # Allow the GitHub token to create and manage issues
  contents: read  # Ensure the GitHub token has access to repository contents and issues

jobs:
  create-issue:
    runs-on: ubuntu-latest
    steps:
      - name: 'Create GitHub issue for release approval'
        id: create_issue
        run: |
          RELEASE_VERSION="${{ github.event.inputs.release_version }}"
          APPLICATION_NAME="${{ github.event.inputs.application_name }}"
          QA_APPROVER="${{ github.event.inputs.qa_approver }}"

          # Create the issue body with instructions for the approvers
          ISSUE_BODY="### Release Approval for ${APPLICATION_NAME} - Version ${RELEASE_VERSION}\n\n#### Approval Needed:\n- QA Approval: @${QA_APPROVER}\n\n#### Instructions:\n- Comment 'approve' to approve the release.\n- Comment 'reject' to reject the release.\n\nOnce approval is received, the deployment will proceed."

          ISSUE_TITLE="Release Approval Request for ${APPLICATION_NAME} ${RELEASE_VERSION}"

          echo "Creating issue for release approval..."
          RESPONSE=$(curl -s -w "%{http_code}" -o response.json \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"title\": \"$ISSUE_TITLE\", \"body\": \"$ISSUE_BODY\"}" \
            https://api.github.com/repos/${{ github.repository }}/issues)

          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_STATUS" -ne 201 ]; then
            echo "Error creating issue: HTTP $HTTP_STATUS"
            cat response.json
            exit 1
          fi

          ISSUE_NUMBER=$(jq '.number' response.json)
          echo "Issue created successfully with number #$ISSUE_NUMBER"
          
          # Output the issue number for future reference
          echo "::set-output name=issue_number::${ISSUE_NUMBER}"

  wait-for-approvals:
    needs: create-issue
    runs-on: ubuntu-latest
    steps:
      - name: 'Wait for approval from QA approver'
        id: check_approval
        run: |
          RELEASE_VERSION="${{ github.event.inputs.release_version }}"
          APPLICATION_NAME="${{ github.event.inputs.application_name }}"
          QA_APPROVER="${{ github.event.inputs.qa_approver }}"

          # Retrieve the issue number from the previous job's output
          ISSUE_NUMBER=${{ needs.create-issue.outputs.issue_number }}
          echo "Waiting for approval in issue #${ISSUE_NUMBER}"

          # Add a brief delay to ensure the issue is fully created before checking comments
          sleep 10  # Wait for 10 seconds before starting the polling loop

          # Poll for approval comments (simple check for "approve")
          APPROVAL="false"
          while [ "$APPROVAL" != "true" ]; do
            # Get all comments from the issue
            COMMENTS=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments)

            # Debug: Print the comments to help us debug
            echo "Fetched comments: $COMMENTS"

            # Check if the QA approver commented 'approve'
            if echo "$COMMENTS" | grep -q "@${QA_APPROVER}" && echo "$COMMENTS" | grep -q "approve"; then
              echo "QA Approver (@${QA_APPROVER}) has approved."
              APPROVAL=true
            else
              echo "QA Approver (@${QA_APPROVER}) has not approved yet."
            fi

            # If QA approver has approved, proceed to deployment
            if [ "$APPROVAL" == "true" ]; then
              echo "Approval received. Proceeding with deployment."
            else
              echo "Waiting for approval from QA approver..."
              sleep 30  # Wait for 30 seconds before checking again
            fi
          done

  deploy:
    needs: wait-for-approvals
    runs-on: ubuntu-latest
    steps:
      - name: Deploy the application
        run: |
          echo "Deploying version ${{ github.event.inputs.release_version }} of ${{
            github.event.inputs.application_name }} after receiving approval."
          # Add your deployment commands here (e.g., AWS, Azure, GCP deploy, etc.)
