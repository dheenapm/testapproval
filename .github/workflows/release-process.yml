name: Release Process

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version'
        required: true
        default: '1.0.0'
      application_name:
        description: 'Application name'
        required: true
        default: 'my-app'
      qa_approver:
        description: 'QA approver username'
        required: true
      sre_approver:
        description: 'SRE approver username'
        required: true
      app_owner_approver:
        description: 'App Owner approver username'
        required: true

permissions:
  issues: write  # Allow the GitHub token to create and manage issues

jobs:
  create-issue:
    runs-on: ubuntu-latest
    steps:
      - name: 'Create GitHub issue for release approval'
        id: create_issue
        run: |
          RELEASE_VERSION="${{ github.event.inputs.release_version }}"
          APPLICATION_NAME="${{ github.event.inputs.application_name }}"
          QA_APPROVER="${{ github.event.inputs.qa_approver }}"
          SRE_APPROVER="${{ github.event.inputs.sre_approver }}"
          APP_OWNER_APPROVER="${{ github.event.inputs.app_owner_approver }}"

          # Create the issue body with task list (checkboxes) for approvals
          ISSUE_BODY="### Release Approval for ${APPLICATION_NAME} - Version ${RELEASE_VERSION}\n\n#### Approval Needed:\n- QA Approval: @${QA_APPROVER} [ ]\n- SRE Approval: @${SRE_APPROVER} [ ]\n- App Owner Approval: @${APP_OWNER_APPROVER} [ ]\n\n#### Instructions:\n- Check the box to approve the release.\n\nOnce all approvals are received, the deployment will proceed."

          ISSUE_TITLE="Release Approval Request for ${APPLICATION_NAME} ${RELEASE_VERSION}"

          echo "Creating issue for release approval..."
          RESPONSE=$(curl -s -w "%{http_code}" -o response.json \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"title\": \"$ISSUE_TITLE\", \"body\": \"$ISSUE_BODY\"}" \
            https://api.github.com/repos/${{ github.repository }}/issues)

          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_STATUS" -ne 201 ]; then
            echo "Error creating issue: HTTP $HTTP_STATUS"
            cat response.json
            exit 1
          fi

          ISSUE_NUMBER=$(jq '.number' response.json)
          echo "Issue created successfully with number #$ISSUE_NUMBER"
          echo "::set-output name=issue_number::$ISSUE_NUMBER"

  wait-for-approvals:
    needs: create-issue
    runs-on: ubuntu-latest
    steps:
      - name: 'Wait for all approvals from approvers'
        id: check_approvals
        run: |
          RELEASE_VERSION="${{ github.event.inputs.release_version }}"
          APPLICATION_NAME="${{ github.event.inputs.application_name }}"
          QA_APPROVER="${{ github.event.inputs.qa_approver }}"
          SRE_APPROVER="${{ github.event.inputs.sre_approver }}"
          APP_OWNER_APPROVER="${{ github.event.inputs.app_owner_approver }}"

          # Retrieve the issue number from the previous job's output
          ISSUE_NUMBER=${{ needs.create-issue.outputs.issue_number }}
          echo "Waiting for approvals in issue #${ISSUE_NUMBER}"

          # Fetch the issue body to check task list checkboxes
          ISSUE_BODY=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER})

          # Log the fetched issue body for debugging
          echo "Fetched issue body: $ISSUE_BODY"

          # Check if QA approver has checked their box
          if echo "$ISSUE_BODY" | grep -q "* QA Approval: @${QA_APPROVER} \[x\]"; then
            echo "QA Approver (@${QA_APPROVER}) has approved."
            QA_APPROVAL=true
          else
            echo "QA Approver (@${QA_APPROVER}) has not approved yet."
            QA_APPROVAL=false
          fi

          # Check if SRE approver has checked their box
          if echo "$ISSUE_BODY" | grep -q "* SRE Approval: @${SRE_APPROVER} \[x\]"; then
            echo "SRE Approver (@${SRE_APPROVER}) has approved."
            SRE_APPROVAL=true
          else
            echo "SRE Approver (@${SRE_APPROVER}) has not approved yet."
            SRE_APPROVAL=false
          fi

          # Check if App Owner has checked their box
          if echo "$ISSUE_BODY" | grep -q "* App Owner Approval: @${APP_OWNER_APPROVER} \[x\]"; then
            echo "App Owner Approver (@${APP_OWNER_APPROVER}) has approved."
            APP_OWNER_APPROVAL=true
          else
            echo "App Owner Approver (@${APP_OWNER_APPROVER}) has not approved yet."
            APP_OWNER_APPROVAL=false
          fi

          # If all approvers have checked their boxes, proceed to deployment
          if [ "$QA_APPROVAL" == "true" ] && [ "$SRE_APPROVAL" == "true" ] && [ "$APP_OWNER_APPROVAL" == "true" ]; then
            APPROVALS="true"
          else
            echo "Waiting for approvals from all approvers..."
            sleep 30  # Wait for 30 seconds before checking again
          fi

          if [ "$APPROVALS" == "true" ]; then
            echo "All approvals received. Proceeding with deployment."
          fi

  deploy:
    needs: wait-for-approvals
    runs-on: ubuntu-latest
    steps:
      - name: Deploy the application
        run: |
          echo "Deploying version ${{ github.event.inputs.release_version }} of ${{
            github.event.inputs.application_name }} after receiving all approvals."
          # Add your deployment commands here (e.g., AWS, Azure, GCP deploy, etc.)
